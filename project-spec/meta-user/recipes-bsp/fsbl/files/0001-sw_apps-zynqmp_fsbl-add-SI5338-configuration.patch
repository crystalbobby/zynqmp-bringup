From 8e30b03c59ced1c7eedf8a7d42347fb72c0102e0 Mon Sep 17 00:00:00 2001
From: dongkesi <skd2278@gmail.com>
Date: Mon, 16 Sep 2019 10:33:12 +0800
Subject: [PATCH 1/3] sw_apps: zynqmp_fsbl: add SI5338 configuration

---
 lib/sw_apps/zynqmp_fsbl/src/register_map.h | 440 +++++++++++++++++++++++++++++
 lib/sw_apps/zynqmp_fsbl/src/si5338.c       | 157 ++++++++++
 lib/sw_apps/zynqmp_fsbl/src/si5338.h       |  34 +++
 lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c  |  41 +++
 lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c   |   4 +-
 5 files changed, 675 insertions(+), 1 deletion(-)
 create mode 100644 lib/sw_apps/zynqmp_fsbl/src/register_map.h
 create mode 100644 lib/sw_apps/zynqmp_fsbl/src/si5338.c
 create mode 100644 lib/sw_apps/zynqmp_fsbl/src/si5338.h

diff --git a/lib/sw_apps/zynqmp_fsbl/src/register_map.h b/lib/sw_apps/zynqmp_fsbl/src/register_map.h
new file mode 100644
index 0000000..5474474
--- /dev/null
+++ b/lib/sw_apps/zynqmp_fsbl/src/register_map.h
@@ -0,0 +1,440 @@
+//Register map for use with AN428 (JumpStart)
+//http://www.silabs.com/clocks 
+//Copyright 2012 Silicon Laboratories
+//#BEGIN_HEADER
+//Date = Friday, August 30, 2019 4:03 PM
+//File version = 3
+//Software Name = ClockBuilder Desktop
+//Software version = 6.5
+//Software date = June 4, 2015
+//Chip = Si533x
+//Part Number = Si533x
+//#END_HEADER
+//Input Frequency (MHz) = 25.000000000
+//Input Type = CMOS_SSTL_HSTL
+//P1 = 1
+//Input Mux = RefClk
+//FDBK Input Frequency (MHz) = 25.000000000
+//FDBK Input Type = OFF
+//P2 = 1
+//FDBK Mux = NoClk
+//PFD Input Frequency (MHz) = 25.000000000
+//VCO Frequency (GHz) = 2.500000
+//N = 100  (100.0000)
+//Internal feedback enabled
+//Output Clock 0
+// Output Frequency (MHz) = 100.000000000
+// Mux Selection = IDn
+// MultiSynth = 25  (25.0000)
+// R = 1
+//Output Clock 1
+// Output Frequency (MHz) = 125.000000000
+// Mux Selection = IDn
+// MultiSynth = 20  (20.0000)
+// R = 1
+//Output Clock 2
+// Output Frequency (MHz) = 125.000000000
+// Mux Selection = IDn
+// MultiSynth = 20  (20.0000)
+// R = 1
+//Output Clock 3
+// Output Frequency (MHz) = 125.000000000
+// Mux Selection = IDn
+// MultiSynth = 20  (20.0000)
+// R = 1
+//Driver 0
+// Enabled
+// Powered on
+// Output voltage = 1.80
+// Output type = 1.8V LVDS
+// Output state when disabled = StopLow
+//Driver 1
+// Enabled
+// Powered on
+// Output voltage = 1.80
+// Output type = 1.8V LVDS
+// Output state when disabled = StopLow
+//Driver 2
+// Enabled
+// Powered on
+// Output voltage = 1.80
+// Output type = 1.8V LVDS
+// Output state when disabled = StopLow
+//Driver 3
+// Enabled
+// Powered on
+// Output voltage = 1.80
+// Output type = 1.8V LVDS
+// Output state when disabled = StopLow
+//Clock 0 phase inc/dec step size (ns) = 0.000
+//Clock 1 phase inc/dec step size (ns) = 0.000
+//Clock 2 phase inc/dec step size (ns) = 0.000
+//Clock 3 phase inc/dec step size (ns) = 0.000
+//Phase increment and decrement pin control is off
+//Frequency increment and decrement pin control is off
+//Frequency increment and decrement is disabled
+//Initial phase offset 0 (ns) = 0.000
+//Initial phase offset 1 (ns) = 0.000
+//Initial phase offset 2 (ns) = 0.000
+//Initial phase offset 3 (ns) = 0.000
+//SSC is disabled
+
+#define NUM_REGS_MAX 350
+
+typedef struct Reg_Data{
+   unsigned char Reg_Addr;
+   unsigned char Reg_Val;
+   unsigned char Reg_Mask;
+} Reg_Data;
+
+Reg_Data const code Reg_Store[NUM_REGS_MAX] = {
+{  0,0x00,0x00},
+{  1,0x00,0x00},
+{  2,0x00,0x00},
+{  3,0x00,0x00},
+{  4,0x00,0x00},
+{  5,0x00,0x00},
+{  6,0x08,0x1D},
+{  7,0x00,0x00},
+{  8,0x70,0x00},
+{  9,0x0F,0x00},
+{ 10,0x00,0x00},
+{ 11,0x00,0x00},
+{ 12,0x00,0x00},
+{ 13,0x00,0x00},
+{ 14,0x00,0x00},
+{ 15,0x00,0x00},
+{ 16,0x00,0x00},
+{ 17,0x00,0x00},
+{ 18,0x00,0x00},
+{ 19,0x00,0x00},
+{ 20,0x00,0x00},
+{ 21,0x00,0x00},
+{ 22,0x00,0x00},
+{ 23,0x00,0x00},
+{ 24,0x00,0x00},
+{ 25,0x00,0x00},
+{ 26,0x00,0x00},
+{ 27,0x70,0x80},
+{ 28,0x0B,0xFF},
+{ 29,0x08,0xFF},
+{ 30,0xB0,0xFF},
+{ 31,0xC0,0xFF},
+{ 32,0xC0,0xFF},
+{ 33,0xC0,0xFF},
+{ 34,0xC0,0xFF},
+{ 35,0xAA,0xFF},
+{ 36,0x06,0x1F},
+{ 37,0x06,0x1F},
+{ 38,0x06,0x1F},
+{ 39,0x06,0x1F},
+{ 40,0x84,0xFF},
+{ 41,0x10,0x7F},
+{ 42,0x24,0x3F},
+{ 43,0x00,0x00},
+{ 44,0x00,0x00},
+{ 45,0x00,0xFF},
+{ 46,0x00,0xFF},
+{ 47,0x14,0x3F},
+{ 48,0x3A,0xFF},
+{ 49,0x00,0xFF},
+{ 50,0xC4,0xFF},
+{ 51,0x07,0xFF},
+{ 52,0x10,0xFF},
+{ 53,0x80,0xFF},
+{ 54,0x0A,0xFF},
+{ 55,0x00,0xFF},
+{ 56,0x00,0xFF},
+{ 57,0x00,0xFF},
+{ 58,0x00,0xFF},
+{ 59,0x01,0xFF},
+{ 60,0x00,0xFF},
+{ 61,0x00,0xFF},
+{ 62,0x00,0x3F},
+{ 63,0x10,0xFF},
+{ 64,0x00,0xFF},
+{ 65,0x08,0xFF},
+{ 66,0x00,0xFF},
+{ 67,0x00,0xFF},
+{ 68,0x00,0xFF},
+{ 69,0x00,0xFF},
+{ 70,0x01,0xFF},
+{ 71,0x00,0xFF},
+{ 72,0x00,0xFF},
+{ 73,0x00,0x3F},
+{ 74,0x10,0xFF},
+{ 75,0x00,0xFF},
+{ 76,0x08,0xFF},
+{ 77,0x00,0xFF},
+{ 78,0x00,0xFF},
+{ 79,0x00,0xFF},
+{ 80,0x00,0xFF},
+{ 81,0x01,0xFF},
+{ 82,0x00,0xFF},
+{ 83,0x00,0xFF},
+{ 84,0x00,0x3F},
+{ 85,0x10,0xFF},
+{ 86,0x00,0xFF},
+{ 87,0x08,0xFF},
+{ 88,0x00,0xFF},
+{ 89,0x00,0xFF},
+{ 90,0x00,0xFF},
+{ 91,0x00,0xFF},
+{ 92,0x01,0xFF},
+{ 93,0x00,0xFF},
+{ 94,0x00,0xFF},
+{ 95,0x00,0x3F},
+{ 96,0x10,0x00},
+{ 97,0x00,0xFF},
+{ 98,0x30,0xFF},
+{ 99,0x00,0xFF},
+{100,0x00,0xFF},
+{101,0x00,0xFF},
+{102,0x00,0xFF},
+{103,0x01,0xFF},
+{104,0x00,0xFF},
+{105,0x00,0xFF},
+{106,0x80,0xBF},
+{107,0x00,0xFF},
+{108,0x00,0xFF},
+{109,0x00,0xFF},
+{110,0x40,0xFF},
+{111,0x00,0xFF},
+{112,0x00,0xFF},
+{113,0x00,0xFF},
+{114,0x40,0xFF},
+{115,0x00,0xFF},
+{116,0x80,0xFF},
+{117,0x00,0xFF},
+{118,0x40,0xFF},
+{119,0x00,0xFF},
+{120,0x00,0xFF},
+{121,0x00,0xFF},
+{122,0x40,0xFF},
+{123,0x00,0xFF},
+{124,0x00,0xFF},
+{125,0x00,0xFF},
+{126,0x00,0xFF},
+{127,0x00,0xFF},
+{128,0x00,0xFF},
+{129,0x00,0x0F},
+{130,0x00,0x0F},
+{131,0x00,0xFF},
+{132,0x00,0xFF},
+{133,0x00,0xFF},
+{134,0x00,0xFF},
+{135,0x00,0xFF},
+{136,0x00,0xFF},
+{137,0x00,0xFF},
+{138,0x00,0xFF},
+{139,0x00,0xFF},
+{140,0x00,0xFF},
+{141,0x00,0xFF},
+{142,0x00,0xFF},
+{143,0x00,0xFF},
+{144,0x00,0xFF},
+{145,0x00,0x00},
+{146,0xFF,0x00},
+{147,0x00,0x00},
+{148,0x00,0x00},
+{149,0x00,0x00},
+{150,0x00,0x00},
+{151,0x00,0x00},
+{152,0x00,0xFF},
+{153,0x00,0xFF},
+{154,0x00,0xFF},
+{155,0x00,0xFF},
+{156,0x00,0xFF},
+{157,0x00,0xFF},
+{158,0x00,0x0F},
+{159,0x00,0x0F},
+{160,0x00,0xFF},
+{161,0x00,0xFF},
+{162,0x00,0xFF},
+{163,0x00,0xFF},
+{164,0x00,0xFF},
+{165,0x00,0xFF},
+{166,0x00,0xFF},
+{167,0x00,0xFF},
+{168,0x00,0xFF},
+{169,0x00,0xFF},
+{170,0x00,0xFF},
+{171,0x00,0xFF},
+{172,0x00,0xFF},
+{173,0x00,0xFF},
+{174,0x00,0xFF},
+{175,0x00,0xFF},
+{176,0x00,0xFF},
+{177,0x00,0xFF},
+{178,0x00,0xFF},
+{179,0x00,0xFF},
+{180,0x00,0xFF},
+{181,0x00,0x0F},
+{182,0x00,0xFF},
+{183,0x00,0xFF},
+{184,0x00,0xFF},
+{185,0x00,0xFF},
+{186,0x00,0xFF},
+{187,0x00,0xFF},
+{188,0x00,0xFF},
+{189,0x00,0xFF},
+{190,0x00,0xFF},
+{191,0x00,0xFF},
+{192,0x00,0xFF},
+{193,0x00,0xFF},
+{194,0x00,0xFF},
+{195,0x00,0xFF},
+{196,0x00,0xFF},
+{197,0x00,0xFF},
+{198,0x00,0xFF},
+{199,0x00,0xFF},
+{200,0x00,0xFF},
+{201,0x00,0xFF},
+{202,0x00,0xFF},
+{203,0x00,0x0F},
+{204,0x00,0xFF},
+{205,0x00,0xFF},
+{206,0x00,0xFF},
+{207,0x00,0xFF},
+{208,0x00,0xFF},
+{209,0x00,0xFF},
+{210,0x00,0xFF},
+{211,0x00,0xFF},
+{212,0x00,0xFF},
+{213,0x00,0xFF},
+{214,0x00,0xFF},
+{215,0x00,0xFF},
+{216,0x00,0xFF},
+{217,0x00,0xFF},
+{218,0x00,0x00},
+{219,0x00,0x00},
+{220,0x00,0x00},
+{221,0x0D,0x00},
+{222,0x00,0x00},
+{223,0x00,0x00},
+{224,0xF4,0x00},
+{225,0xF0,0x00},
+{226,0x00,0x00},
+{227,0x00,0x00},
+{228,0x00,0x00},
+{229,0x00,0x00},
+{231,0x00,0x00},
+{232,0x00,0x00},
+{233,0x00,0x00},
+{234,0x00,0x00},
+{235,0x00,0x00},
+{236,0x00,0x00},
+{237,0x00,0x00},
+{238,0x14,0x00},
+{239,0x00,0x00},
+{240,0x00,0x00},
+{242,0x02,0x02},
+{243,0xF0,0x00},
+{244,0x00,0x00},
+{245,0x00,0x00},
+{247,0x00,0x00},
+{248,0x00,0x00},
+{249,0xA8,0x00},
+{250,0x00,0x00},
+{251,0x84,0x00},
+{252,0x00,0x00},
+{253,0x00,0x00},
+{254,0x00,0x00},
+{255, 1, 0xFF}, // set page bit to 1 
+{  0,0x00,0x00},
+{  1,0x00,0x00},
+{  2,0x00,0x00},
+{  3,0x00,0x00},
+{  4,0x00,0x00},
+{  5,0x00,0x00},
+{  6,0x00,0x00},
+{  7,0x00,0x00},
+{  8,0x00,0x00},
+{  9,0x00,0x00},
+{ 10,0x00,0x00},
+{ 11,0x00,0x00},
+{ 12,0x00,0x00},
+{ 13,0x00,0x00},
+{ 14,0x00,0x00},
+{ 15,0x00,0x00},
+{ 16,0x00,0x00},
+{ 17,0x01,0x00},
+{ 18,0x00,0x00},
+{ 19,0x00,0x00},
+{ 20,0x90,0x00},
+{ 21,0x31,0x00},
+{ 22,0x00,0x00},
+{ 23,0x00,0x00},
+{ 24,0x01,0x00},
+{ 25,0x00,0x00},
+{ 26,0x00,0x00},
+{ 27,0x00,0x00},
+{ 28,0x00,0x00},
+{ 29,0x00,0x00},
+{ 30,0x00,0x00},
+{ 31,0x00,0xFF},
+{ 32,0x00,0xFF},
+{ 33,0x01,0xFF},
+{ 34,0x00,0xFF},
+{ 35,0x00,0xFF},
+{ 36,0x90,0xFF},
+{ 37,0x31,0xFF},
+{ 38,0x00,0xFF},
+{ 39,0x00,0xFF},
+{ 40,0x01,0xFF},
+{ 41,0x00,0xFF},
+{ 42,0x00,0xFF},
+{ 43,0x00,0x0F},
+{ 44,0x00,0x00},
+{ 45,0x00,0x00},
+{ 46,0x00,0x00},
+{ 47,0x00,0xFF},
+{ 48,0x00,0xFF},
+{ 49,0x01,0xFF},
+{ 50,0x00,0xFF},
+{ 51,0x00,0xFF},
+{ 52,0x90,0xFF},
+{ 53,0x31,0xFF},
+{ 54,0x00,0xFF},
+{ 55,0x00,0xFF},
+{ 56,0x01,0xFF},
+{ 57,0x00,0xFF},
+{ 58,0x00,0xFF},
+{ 59,0x00,0x0F},
+{ 60,0x00,0x00},
+{ 61,0x00,0x00},
+{ 62,0x00,0x00},
+{ 63,0x00,0xFF},
+{ 64,0x00,0xFF},
+{ 65,0x01,0xFF},
+{ 66,0x00,0xFF},
+{ 67,0x00,0xFF},
+{ 68,0x90,0xFF},
+{ 69,0x31,0xFF},
+{ 70,0x00,0xFF},
+{ 71,0x00,0xFF},
+{ 72,0x01,0xFF},
+{ 73,0x00,0xFF},
+{ 74,0x00,0xFF},
+{ 75,0x00,0x0F},
+{ 76,0x00,0x00},
+{ 77,0x00,0x00},
+{ 78,0x00,0x00},
+{ 79,0x00,0xFF},
+{ 80,0x00,0xFF},
+{ 81,0x00,0xFF},
+{ 82,0x00,0xFF},
+{ 83,0x00,0xFF},
+{ 84,0x90,0xFF},
+{ 85,0x31,0xFF},
+{ 86,0x00,0xFF},
+{ 87,0x00,0xFF},
+{ 88,0x01,0xFF},
+{ 89,0x00,0xFF},
+{ 90,0x00,0xFF},
+{ 91,0x00,0x0F},
+{ 92,0x00,0x00},
+{ 93,0x00,0x00},
+{ 94,0x00,0x00},
+{255, 0, 0xFF} }; // set page bit to 0
+//End of file
diff --git a/lib/sw_apps/zynqmp_fsbl/src/si5338.c b/lib/sw_apps/zynqmp_fsbl/src/si5338.c
new file mode 100644
index 0000000..f38f17f
--- /dev/null
+++ b/lib/sw_apps/zynqmp_fsbl/src/si5338.c
@@ -0,0 +1,157 @@
+/*
+-- Company: 		Trenz Electronic
+-- Engineer: 		Oleksandr Kiyenko
+-- Modified Engineer: 		John Hartfiel
+ */
+#include "si5338.h"
+#include "xiicps.h"
+#include "xfsbl_hw.h"
+#define code
+#include "register_map.h"
+static XIicPs Iic;		/**< Instance of the IIC Device */
+int i2c_init(void){
+  XIicPs_Config *I2cCfgPtr;
+	int Status = I2C_SUCCESS;
+
+	XFsbl_Printf(DEBUG_GENERAL, "SI5338 Init Function\r\n");
+   	I2cCfgPtr = XIicPs_LookupConfig(XPAR_XIICPS_0_DEVICE_ID);
+
+    if (I2cCfgPtr == NULL){
+    XFsbl_Printf(DEBUG_GENERAL, "XIicPs_LookupConfig failure\r\n");
+		return I2C_INIT_ERR;
+	}
+	
+    Status = XIicPs_CfgInitialize(&Iic, I2cCfgPtr, I2cCfgPtr->BaseAddress);
+    if (Status != I2C_SUCCESS) {
+      XFsbl_Printf(DEBUG_GENERAL, "XIicPs_CfgInitialize failure\r\n");
+      return Status;
+    }
+	
+    Status = XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);
+
+	return Status;
+}
+
+
+int i2c_write(unsigned char chip_addr, char Addr, char Data)
+{
+	int Status;
+	u8 SendBuffer[2];
+
+	SendBuffer[0] = Addr;
+	SendBuffer[1] = Data;
+	Status = XIicPs_MasterSendPolled(&Iic, SendBuffer, 2, chip_addr);
+	while (XIicPs_BusIsBusy(&Iic));
+
+	return Status;
+}
+
+int si5338_write(XIicPs *InstancePtr, char Addr, char Data)
+{
+	int Status;
+	u8 SendBuffer[2];
+
+	SendBuffer[0] = Addr;
+	SendBuffer[1] = Data;
+	Status = XIicPs_MasterSendPolled(InstancePtr,SendBuffer, 2, IIC_ADDR);
+	while (XIicPs_BusIsBusy(InstancePtr));
+
+	return Status;
+}
+
+char si5338_read(XIicPs *InstancePtr, char Addr)
+{
+	u8 wr_data, rd_data;
+
+	wr_data = Addr;
+	XIicPs_MasterSendPolled(InstancePtr, &wr_data, 1, IIC_ADDR);
+	XIicPs_MasterRecvPolled(InstancePtr, &rd_data, 1, IIC_ADDR);
+	while (XIicPs_BusIsBusy(InstancePtr));
+	return rd_data;
+}
+
+int si5338_write_mask(XIicPs *InstancePtr, char Addr, char Data, char Mask)
+{
+	u8 reg_val;
+
+	if(Mask == 0xFF){	// All bits
+		si5338_write(InstancePtr, Addr, Data);
+	}
+	else{						// Write by mask
+		reg_val = si5338_read(InstancePtr, Addr);
+		reg_val &= ~Mask;	// Clear bits to write
+		reg_val |= Data & Mask;	// Set bits by mask
+		si5338_write(InstancePtr, Addr, reg_val);
+	}
+	return XST_SUCCESS;
+}
+
+int si5338_delay(int delay_ms)
+{
+	volatile int i;
+	for(i=0;i<(delay_ms*1000000);i++);
+	return XST_SUCCESS;
+}
+
+int si5338_init()
+{
+	int Status, i;
+	Reg_Data rd;
+	u8 reg_val, test_addr, test_data;
+	// Check chip by reading Revision reg 0x00
+	test_addr = 0x00;		// Address of test register
+	Status = XIicPs_MasterSendPolled(&Iic, &test_addr, 1, IIC_ADDR);
+	if (Status != XST_SUCCESS) {
+		XFsbl_Printf(DEBUG_GENERAL, "Si5338 XIicPs_MasterSendPolled failure\r\n");
+		return XST_FAILURE;
+	}
+	Status = XIicPs_MasterRecvPolled(&Iic, &test_data, 1, IIC_ADDR);
+	if (Status != XST_SUCCESS) {
+		XFsbl_Printf(DEBUG_GENERAL, "Si5338 XIicPs_MasterRecvPolled failure\r\n");
+		return XST_FAILURE;
+	}
+	while (XIicPs_BusIsBusy(&Iic));	// Wait
+	XFsbl_Printf(DEBUG_PRINT_ALWAYS, "Si5338 Rev %d Initialization\t\t",test_data);
+
+	// I2C Programming Procedure
+	si5338_write(&Iic, 246, 0x01);					//Hard reset
+	// Disable Outputs
+	si5338_write_mask(&Iic, 230, EOB_ALL, EOB_ALL);	// EOB_ALL = 1
+	// Pause LOL
+	si5338_write_mask(&Iic, 241, DIS_LOL, DIS_LOL);	// DIS_LOL = 1
+	// Write new configuration to device accounting for the write-allowed mask
+	for(i=0; i<NUM_REGS_MAX; i++){
+		rd = Reg_Store[i];
+		si5338_write_mask(&Iic, rd.Reg_Addr, rd.Reg_Val, rd.Reg_Mask);
+	}
+	// Validate clock input status
+	reg_val = si5338_read(&Iic, 218) & LOS_MASK;
+	while(reg_val != 0){
+		reg_val = si5338_read(&Iic, 218) & LOS_MASK;
+	}
+	// Configure PLL for locking
+	si5338_write_mask(&Iic, 49, 0, FCAL_OVRD_EN);	//FCAL_OVRD_EN = 0
+	// Initiate Locking of PLL
+	si5338_write(&Iic, 246, SOFT_RESET);			//SOFT_RESET = 1
+	si5338_delay(25);								// Wait 25 ms
+	// Restart LOL
+	si5338_write_mask(&Iic, 241, 0, DIS_LOL);		// DIS_LOL = 0
+	si5338_write(&Iic, 241, 0x65);					// Set reg 241 = 0x65
+	// Confirm PLL lock status
+	reg_val = si5338_read(&Iic, 218) & LOCK_MASK;
+	while(reg_val != 0){
+		reg_val = si5338_read(&Iic, 218) & LOCK_MASK;
+	}
+	//copy FCAL values to active registers
+	si5338_write_mask(&Iic, 47, si5338_read(&Iic, 237), 0x03);	// 237[1:0] to 47[1:0]
+	si5338_write(&Iic, 46, si5338_read(&Iic, 236));	// 236[7:0] to 46[7:0]
+	si5338_write(&Iic, 45, si5338_read(&Iic, 235));	// 235[7:0] to 45[7:0]
+	si5338_write_mask(&Iic, 47, 0x14, 0xFC);		// Set 47[7:2] = 000101b
+	// Set PLL to use FCAL values
+	si5338_write_mask(&Iic, 49, FCAL_OVRD_EN, FCAL_OVRD_EN);	//FCAL_OVRD_EN = 1
+	// Enable Outputs
+	si5338_write(&Iic, 230, 0x00);					//EOB_ALL = 0
+	XFsbl_Printf(DEBUG_PRINT_ALWAYS, "Done\r\n");
+	return XST_SUCCESS;
+}
+
diff --git a/lib/sw_apps/zynqmp_fsbl/src/si5338.h b/lib/sw_apps/zynqmp_fsbl/src/si5338.h
new file mode 100644
index 0000000..eceeaf9
--- /dev/null
+++ b/lib/sw_apps/zynqmp_fsbl/src/si5338.h
@@ -0,0 +1,34 @@
+/*
+-- Company: 		Trenz Electronic
+-- Engineer: 		Oleksandr Kiyenko
+ */
+
+#ifndef SI5338_H_
+#define SI5338_H_
+
+#include "xiicps.h"
+
+#define IIC_SCLK_RATE			400000
+#define IIC_ADDR				0x70
+#define IIC_BUS					0
+
+#define	I2C_SUCCESS		0
+#define I2C_INIT_ERR	1
+
+#define LOS_MASK_IN1IN2IN3		0x04
+#define LOS_MASK				LOS_MASK_IN1IN2IN3
+#define PLL_LOL					0x10
+#define LOS_FDBK				0x08
+#define LOS_CLKIN				0x04
+#define SYS_CAL					0x01
+#define LOCK_MASK				(PLL_LOL | LOS_CLKIN | SYS_CAL)
+#define FCAL_OVRD_EN			0x80
+#define SOFT_RESET				0x02
+#define EOB_ALL					0x10
+#define DIS_LOL					0x80
+
+int i2c_init();
+int i2c_write(unsigned char chip_addr, char Addr, char Data);
+int si5338_init();
+
+#endif /* SI5338_H_ */
diff --git a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c
index 5d9a2b6..f52a0c7 100644
--- a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c
+++ b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_board.c
@@ -56,6 +56,10 @@
 ******************************************************************************/
 /***************************** Include Files *********************************/
 #include "xfsbl_board.h"
+// TE Mod: 
+#include "xparameters.h"
+#include "si5338.h"
+// TE Mod finished  
 #if defined(XPS_BOARD_ZCU102) || defined(XPS_BOARD_ZCU106)		\
 		|| defined(XPS_BOARD_ZCU104) || defined(XPS_BOARD_ZCU111)
 /************************** Constant Definitions *****************************/
@@ -856,6 +860,24 @@ static void XFsbl_PcieReset(void)
 }
 #endif
 #endif
+
+static void XFsbl_WarmReset(void) {
+	u32 RegValue;
+	u32 ResetReason;
+	ResetReason = XFsbl_In32(CRL_APB_RESET_REASON);
+	XFsbl_Printf(DEBUG_GENERAL, "My reset reason 0x%x\r\n", ResetReason);
+	if ((ResetReason & (1 << 5)) == 0) {
+		/* Soft reset the system */
+		XFsbl_Printf(DEBUG_GENERAL,"Performing System Soft Reset\n\r");
+		RegValue = XFsbl_In32(CRL_APB_RESET_CTRL);
+		XFsbl_Out32(CRL_APB_RESET_CTRL, RegValue | CRL_APB_RESET_CTRL_SOFT_RESET_MASK);
+		/* wait here until reset happens */
+        while(1);
+    } else {
+        XFsbl_Printf(DEBUG_GENERAL,"Performing System Soft Reset Second Done\n\r");
+    }
+}      
+                               
 /*****************************************************************************/
 /**
  * This function does board specific initialization.
@@ -872,6 +894,25 @@ static void XFsbl_PcieReset(void)
 u32 XFsbl_BoardInit(void)
 {
 	u32 Status;
+
+// TE Mod :  
+    XFsbl_Printf(DEBUG_GENERAL, "\r\n--------------------------------------------------------------------------------\r\n");
+    XFsbl_Printf(DEBUG_GENERAL, "TE0803 Board Initialisation\r\n");
+    Status = i2c_init();                      // Configure I2C Bus 0 driver instance
+    if (Status != XFSBL_SUCCESS) {
+       XFsbl_Printf(DEBUG_GENERAL, "Error:I2C Init\r\n");
+       goto END;
+    }
+
+    Status = si5338_init();                      // Configure clocks
+    if (Status != XFSBL_SUCCESS) {
+       XFsbl_Printf(DEBUG_GENERAL, "Error: Configure SI5338 CLK\r\n");
+       goto END;
+    }
+    XFsbl_WarmReset();
+    XFsbl_Printf(DEBUG_GENERAL, "--------------------------------------------------------------------------------\r\n");
+// TE Mod finished  
+
 #if defined(XPS_BOARD_ZCU102) || defined(XPS_BOARD_ZCU106)		\
 		|| defined(XPS_BOARD_ZCU104) || defined(XPS_BOARD_ZCU111)
 	/* Program I2C to configure GT lanes */
diff --git a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c
index 191b335..5cacc22 100644
--- a/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c
+++ b/lib/sw_apps/zynqmp_fsbl/src/xfsbl_main.c
@@ -344,8 +344,10 @@ void XFsbl_PrintFsblBanner(void )
 	 */
 #if !defined(XFSBL_PERF) || defined(FSBL_DEBUG) || defined(FSBL_DEBUG_INFO) \
 			|| defined(FSBL_DEBUG_DETAILED)
+// TE Mod :
 	XFsbl_Printf(DEBUG_PRINT_ALWAYS,
-                 "Xilinx Zynq MP First Stage Boot Loader \n\r");
+                 "Xilinx Zynq MP First Stage Boot Loader (TE modified)\n\r");
+// TE Mod finished             
 	XFsbl_Printf(DEBUG_PRINT_ALWAYS,
                  "Release %d.%d   %s  -  %s\r\n",
                  SDK_RELEASE_YEAR, SDK_RELEASE_QUARTER,__DATE__,__TIME__);
-- 
2.7.4

